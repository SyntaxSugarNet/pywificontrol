#!/usr/bin/python


# Written by Ivan Sapozhkov and Denis Chagin <denis.chagin@emlid.com>
#
# Copyright (c) 2016, Emlid Limited
# All rights reserved.
#
# Redistribution and use in source and binary forms,
# with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import signal
from wificontrol import WiFiMonitor
from wificontrol.wificontrol import WiFiControl


def main():
    wifi_monitor = WiFiMonitor()
    wifi_control = WiFiControl()

    def handler(signum, frame):
        wifi_monitor.shutdown()

    def print_wifi_state(event, data):
        print(f'{event} -> {data}')

        if event == wifi_monitor.CLIENT_DISCONNECTED:
            print('Changing to hotspot mode...')
            wifi_control.start_hotspot_mode()
        elif event == wifi_monitor.PEER_DISCONNECTED:
            print('Changing to client mode...')
            wifi_control.start_client_mode()

    wifi_monitor.register_callback(wifi_monitor.CLIENT_DISABLED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.CLIENT_INACTIVE, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.CLIENT_SCANNING, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.CLIENT_CONNECTING, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.CLIENT_CONNECTED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.CLIENT_DISCONNECTED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.HOTSPOT_STARTING, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.HOTSPOT_STARTED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.HOTSPOT_STOPPING, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.HOTSPOT_STOPPED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.HOTSPOT_FAILED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.PEER_CONNECTED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.PEER_RECONNECTED, print_wifi_state)
    wifi_monitor.register_callback(wifi_monitor.PEER_DISCONNECTED, print_wifi_state)

    signal.signal(signal.SIGINT, handler)
    signal.signal(signal.SIGTERM, handler)

    wifi_monitor.run(wifi_control)


if __name__ == '__main__':
    main()
